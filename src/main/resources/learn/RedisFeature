缓存中应存储不常改变的数据, 如菜单项、用户权限、数据字典、配置信息

Spring Cache对Cache进行了抽象
    | @Cacheable 、@CachePut 、@CacheEvict、@Cache(综合多个)、@CacheConfig(类注解,指定该类所有方法的缓存名称)
        -> 生成动态代理类,调用方法前先调用缓存, 不存在则执行方法
        -> Key生成器: KeyGenerator接口(未指定键值，将调用)
        -> 通常使用SpEL指定Key(cacheName::key为唯一标识): #param.field, 支持条件表达式condition/unless， #result表示返回结果
    | 内置基于内存的缓存管理器Simple, 使用ConcurrentHashMap实现
        -> spring.cache.type=Simple/None/Redis/Generic(自定义, 添加CacheManager的实现)
    | 可集成Redis、EhCache
    | 缓存策略: 最大容量、过期时间

缓存分级: 常用数据放在当前内存中(一级缓存), 不常用数据放在Redis服务器(二级缓存)中




### Redis

>> 常用命令:
    redis-cli -h host -p port 连接服务
    auth password 验证密码
    set key value 设置键值对
    mget key key 获取多个值
    decr/incr 自减/自增
    decrby/incrby num 增加减少固定值
    keys x?x* 模糊查询所有键值
    exists key 查询键值是否存在
    del key 删除键值
    expire key time 设置多少秒过期
    ttl key 查看键值的剩余存活时间


>> redis五大类型(所有数据结构都是二进制的)
    | 字符串(String)
    | 哈希/散列/字典(Hash): 存放key-value, Springboot中可用于存放用户的Session数据
        -> hset key e-key e-value
        -> hget key e-key
        -> hexist key e-key
        -> hkeys key 获取键对应的所有字段键
        -> hgetall key 获取键对应的所有键值对
        -> hdel key e-key [e-key]
    | 列表(List): 添加速度块, 查询比较慢
        -> lpush/rpush/lrange/rpop/lpop/llen
        -> 阻塞 blpop/brpop key [time]
    | 集合(Set)
        -> sadd key member [member]
        -> srem key member [member]
        -> smemener key 返回集合中的所有元素
        -> sinter key1 key2 返回两个集合的交集
        -> sinterstore key1 key2 key3 取出前两个集合的交集存放到key3集合中
        -> sunion key1 key2 返回合并后的集合
        -> sunion key1 key2 key3
    | 有序集合(sorted set)


>> publish发布/subscribe订阅: 用于事件通知
    -> subscribe key
    -> publish key value
    -> 订阅指定的模式pattern: psubscribe key*/key?/key[123]

>> Springboot内置 StringRedisTemplate->StringRedisSerializer序列化 (继承 RedisTemplate->默认JDK序列化 ), 假设所有的数据类型都是字符类型
    -> opsForValue/opsForList/...
    -> 绑定key操作: boundValueOps/boundListOps/...
    -> RedisConnnection用于低级别(byte数组)的Redis API操作, 具体抽象有JRedis/Lettuce
    -> 订阅Redis消息需要实现MessageListener的onMessage方法，MessageListenerAdapter(定制序列化方式) ->RedisMessageListenerContainer
    -> RedisTemplate.convertAndSend(channel, value)用于发布消息





