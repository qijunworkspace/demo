Git项目管理

>> SCM软件配置管理
    | 通过执行版本控制、变更控制的规程, 以及使用合适的配置管理软件, 来保证所有配置项的完整性和可跟踪性。
    | 一种标识、组织和控制更改的技术, 贯穿整个软件生命周期中建立和维护项目产品的完整性
    | 工具: Microsoft VSS, CVS/SVN(集中式)等

>> 分布式版本控制: 每台电脑都是完整的版本库, 通过中央版本库进行合并


    +++++++++++++               +++++++++++              +++++++++++      #        +++++++++++
    * Working   +               + Staging +              +  Local  +      #        +  Remote +
    * Directory +               + Area    +              +  Repo   +      #        +  Repo   +
    +++++++++++++               +++++++++++              +++++++++++      #        +++++++++++
          |                          |                        |           #             |
          |       git add            |                        |           #             |
          |  ------------------->    |                        |           #             |
          |                          |       git commit       |           #             |
          |                          |  ------------------->  |           #             |
          |                          |                        |       git push          |
          |                          |                        | --------------------->  |
          |                          |                        |           #             |
          |                          |                        |           #             |
          |                          |                        |           #             |
          |                          |                        |       git fetch         |
          |                          |                        | <---------------------  |
          |                          |                        |           #             |
          |                     git checkout                  |           #             |
          | <-----------------------------------------------  |           #             |
          |                          |                        |           #             |
          |                     git merge                     |           #             |
          | <-----------------------------------------------  |           #             |
          |                          |                        |           #             |
          |                          |                        |           #             |


>> Git: 分布式、速度快、branch灵活、跟踪文件的修改而非文件


>> 本地管理
    | git init 本地创建仓库
        -> 工作目录 Working Directory: 实际文件位置
        -> 缓存/暂存区 Stage(Index): 下一次需要提交的文件
        -> 当前分支HEAD: 指向current branch
    | git reflog 查看版本历史

    | git status 查看仓库当前状态(所有修改文件、冲突位置等)
    | git diff [HEAD -- ] file 查看文件的修改内容
    | git checkout -- file 丢弃file文件在Stage区的修改
          -> 必须有--(否则是切换分支), 回到最近一次get commit/add时的状态, 工作区修改也被回退
    |git checkout branch/tag 切换版本/标签
    | git reset HEAD file 把暂存区的修改撤销, 并重新放回工作区(修改还在工作区)
          -> git reset 既可以回退版本, 也可以把暂存区的修改回退工作区
    | git reset --soft[hard] HEAD~2 回退到倒数第二个commit(版本回退)

    | git add filename 增加文件到仓库
    | git commit -m "comment" 提交必须注释
    | git log [--graph] [--oneline] 查看最近3次详细提交修改内容
        | 版本号commit id由SHA1计算, reset时可以填写前面部分, git自动查询符合的

    | git rm file 从版本库中删除文件(需要commit)

    | git clone path 克隆仓库(可以使用https路径、git协议(SSH)),默认情况下只能看到master分支
    | git checkout HEAD~ files 检出最新文件
        -> git checkout -- file 用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”

>> 分支管理
    | git branch 列出当前所有的本地分支(加*表示当前分支)
    | git checkout -b newBranch 新建一个分支并切换到它(等价于 git branch dev + git checkout dev)
    | git branch -m name1 name2 将name1分支改为name2
    | git branch -d name 删除name分支，-D表示强制删除

    | git merge newBranch 在master主分支执行合并(先切换到需要合并的分支, 切换前需要把所有工作区和暂存区的提交)
    | 解决冲突 git merge后冲突的文件已经被修改, 需要手动打开进行取舍，然后再添加并提交
    | git rebase branch 合并branch分支到当前分支，类似merge


    | git log --graph --pretty=oneline --abbrev-commit 查看分支合并情况/

    | git stash 将当前工作现场暂存（当前修改没有完成，这时切换版本前需要将现场保存）
    | git stash list 查看暂存工作现场
    | git stash apply+drop / pop
    | git stash clear 清空


>> 远程仓库
    | git remote add bName/origin gitPath 设置本地仓库关联对应的远程仓库
        -> git remote add origin git@github.com:qijunworkspace/demo.git (Origin是本地给远程仓库起的名字)
    | git remote [-v] 查看本地的远程仓库
    | git remote rename name1 name2 改名本地远程仓库
    | git remote rm name 删除本地的远程仓库

    | git push -u origin master 推送本地的master分支到远程的origin上
        -> -u参数: 将本地的master分支和远程的master分支(upstream)关联起来(以后可以简化命令)

    | upstream和downstream: 远程仓库的分支和本地分支
    | git branch --set-upstream-to=origin/<branch> local_branch 指定本地分支的上行分支(或者git push --set-upstream origin develop)

    | git push origin:issue2 删除远程origin上面提交的临时分支issue2

    | git fetch origin -> git merge origin/master 更新合并远程仓库的最新代码索引
    | git pull origin master 直接更新合并最新的分支代码(等价于fetch + merge)

    | git mergetool --tool=xxxx 合并冲突解决工具
    | git merge master/other
    | git merge --no-off -m "ccc" branch 禁用fast forward，合并时会创建新的commit

>> 标签(带有唯一名称的commit)
    | git tag 查看当前所有标签
    | git tag tagName [commit_id] 新建标签
    | git tag -a v1.0 [-m 'comment'] 标记当前分支为v1.0版本并添加说明
    | git tag -l 'v1.*' 查看1.0版本下有多少小版本
    | git tag -d v0.1 删除标签(默认存储在本地)
    | git push origin v1.0 推送标签到远程(删除时需要本地和远程都进行操作)


>> 使用实践经验总结
    | master分支应当是稳定版本，用于发布新版本，一般在分支上开发
    | 建立dev分支用于开发，发布版本时将dev合并到master
        -> git checkout -b dev origin/dev 建立分支并与远程分支对应
        -> git push origin dev 向远程推送dev分支
        -> git branch --set-upstream dev origin/dev 将本地dev分支与远程origin/dev分支关联
        -> git pull origin/dev dev 拉取远程分支的内容
        -> 手动解决冲突后，再push到远程仓库 git push origin/dev dev
    | 每个开发人员建立自己的分支, 定时向dev分支合并
    | 开发新的feature最好新建分支
    | master和dev分支需要和远程时刻同步，其他分支视情况而定


>> commit前必须先add, 每一次更改都需要重新add file(增加的是修改部分), 可以一次commit多个修改
   -> commit 自动串成一条时间线
   -> HEAD表示当前版本, HEAD^(^个数表示往上回溯几个版本)或者 HEAD~2
   -> 回退版本时, 仅会将HEAD的指向改变, 然后更新 工作区的文件
   -> 创建Git版本库时, Git自动为我们创建了唯一个master分支
   -> origin是远程库的默认名称


>> 定制Git: git config --global key value 全局配置
    -> git config --global color.ui true 设置git显示颜色
    -> git config --global user.name qijun  (信息会记录在commit记录中)
    -> git config --global user.email qijunworkspace@163.com (信息会记录在commit记录中)
    -> 别名 git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
    -> git config --global core.editor "vim" # 设置Editor使用vim


>> 忽略特殊文件: .gitignore (忽略操作系统自动生成的文件、编译生成的中间文件、可执行文件、敏感信息的配置文件如数据库)
    -> git check-ignore -v fileName 查看文件在哪里被忽略


>> git diff 查看文件的改动情况 -> git diff src/main/resources/learn/GitFeature



















